Parte 1: Pesquisa sobre assincronismo

A) Assincronismo

Assincronismo é a capacidade de executar várias tarefas ao mesmo tempo sem bloquear o fluxo principal do código. Isso permite que o programa continue rodando outras operações enquanto espera o resultado de uma tarefa de maior duração, como requisições de rede.

1) AJAX (Asynchronous JavaScript And XML)

AJAX é um conjunto de técnicas que permite que os navegadores façam requisições HTTP de forma assíncrona, sem precisar recarregar a página inteira. Embora o nome sugira o uso de XML, hoje em dia é mais comum utilizar JSON.

Exemplo de código com AJAX:

let xhr = new XMLHttpRequest();
xhr.open('GET', 'https://jsonplaceholder.typicode.com/todos/1', true);
xhr.onload = function() {
    if (xhr.status === 200) {
        console.log(JSON.parse(xhr.responseText));
    }
};
xhr.send();

2) Promises

Promises são uma maneira moderna de lidar com operações assíncronas. Elas representam um valor que estará disponível em algum momento no futuro (resolvida) ou falhará (rejeitada).

Exemplo de código com Promises:

let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("Operação concluída!"), 1000);
});

promise.then((resultado) => {
    console.log(resultado);  // "Operação concluída!"
}).catch((erro) => {
    console.log(erro);
});

3) Fetch API

Fetch é uma interface mais moderna para realizar requisições HTTP, retornando uma Promise que resolve ou rejeita quando a resposta estiver disponível. É mais simples e legível do que XMLHttpRequest.

Exemplo de código com Fetch:

fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Erro:', error));

4) Async / Await

Async/await é uma sintaxe simplificada para trabalhar com promises. Async define uma função que retorna uma promise, enquanto await pausa a execução da função até que a promise seja resolvida.

Exemplo de código com Async/Await:

async function fetchData() {
    try {
        let response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
        let data = await response.json();
        console.log(data);
    } catch (error) {
        console.error('Erro:', error);
    }
}

fetchData();

5) Vantagens/Desvantagens:


---

B) Outros tópicos

1) Hoisting

O hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo de seu escopo, antes da execução do código. Apenas a declaração é içada, não a inicialização.

Exemplo:

console.log(nome); // undefined
var nome = 'João';

// Equivale a:
var nome;
console.log(nome); // undefined
nome = 'João';

2) Arrow Functions

Arrow functions são funções anônimas introduzidas no ES6. Elas são mais curtas e não têm seu próprio this ou arguments.

Diferenças principais:

Não têm seu próprio this — elas herdam o valor de this do escopo onde foram definidas.

Não podem ser usadas como construtores (new).

Não têm o objeto arguments.


Exemplo:

// Função normal
function soma(a, b) {
    return a + b;
}

// Arrow function
const somaArrow = (a, b) => a + b;

3) Desestruturação (Destructuring)

Desestruturação permite extrair valores de arrays ou objetos de forma mais concisa.

Exemplo com objetos:

const pessoa = { nome: 'Maria', idade: 28 };
const { nome, idade } = pessoa;
console.log(nome);  // 'Maria'

Exemplo com arrays:

const numeros = [1, 2, 3];
const [primeiro, segundo] = numeros;
console.log(primeiro);  // 1

4) Closure

Closure é a combinação de uma função com as variáveis de seu escopo externo. Ela permite que uma função interna acesse as variáveis de uma função externa, mesmo após a função externa ter sido executada.

Exemplo:

function contador() {
    let contagem = 0;
    return function() {
        contagem++;
        return contagem;
    };
}

const incrementar = contador();
console.log(incrementar());  // 1
console.log(incrementar());  // 2


---

Parte 2: Formulário de Consulta ao CEP

Aqui está o código para um formulário que permite consultar um CEP usando três métodos diferentes: AJAX, Fetch API, e Async/Await.

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consulta CEP</title>
</head>
<body>
    <h2>Consulta de CEP</h2>
    <form id="cepForm">
        <label for="cep">Informe o CEP:</label>
        <input type="text" id="cep" name="cep" maxlength="8">
        <button type="button" onclick="consultarCEPviaAJAX()">Consultar via AJAX</button>
        <button type="button" onclick="consultarCEPviaFetch()">Consultar via Fetch API</button>
        <button type="button" onclick="consultarCEPviaAsyncAwait()">Consultar via Async/Await</button>
    </form>

    <div id="resultado"></div>

    <script>
        // Consulta usando AJAX (XMLHttpRequest)
        function consultarCEPviaAJAX() {
            const cep = document.getElementById('cep').value;
            const xhr = new XMLHttpRequest();
            xhr.open('GET', https://viacep.com.br/ws/${cep}/json/, true);
            xhr.onload = function() {
                if (xhr.status === 200) {
                    const resposta = JSON.parse(xhr.responseText);
                    exibirResultado(resposta);
                }
            };
            xhr.send();
        }

        // Consulta usando Fetch API
        function consultarCEPviaFetch() {
            const cep = document.getElementById('cep').value;
            fetch(https://viacep.com.br/ws/${cep}/json/)
                .then(response => response.json())
                .then(data => exibirResultado(data))
                .catch(error => console.error('Erro:', error));
        }

        // Consulta usando Async/Await
        async function consultarCEPviaAsyncAwait() {
            const cep = document.getElementById('cep').value;
            try {
                const response = await fetch(https://viacep.com.br/ws/${cep}/json/);
                const data = await response.json();
                exibirResultado(data);
            } catch (error) {
                console.error('Erro:', error);
            }
        }

        // Função para exibir o resultado da consulta
        function exibirResultado(dados) {
            const resultado = document.getElementById('resultado');
            if (dados.erro) {
                resultado.innerHTML = "CEP não encontrado.";
            } else {
                resultado.innerHTML = `
                    <p><strong>CEP:</strong> ${dados.cep}</p>
                    <p><strong>Logradouro:</strong> ${dados.logradouro}</p>
                    <p><strong>Bairro:</strong> ${dados.bairro}</p>
                    <p><strong>Cidade:</strong> ${dados.localidade}</p>
                    <p><strong>Estado:</strong> ${dados.uf}</p>
                `;
            }
        }
    </script>
</body>
</html>
